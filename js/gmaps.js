/*! * Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome * License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License) */@font-face { font-family: 'FontAwesome'; src: url('../fonts/fontawesome-webfont.eot?v=4.7.0'); src: url('../fonts/fontawesome-webfont.eot?#iefix&v=4.7.0') format('embedded-opentype'), url('../fonts/fontawesome-webfont.woff2?v=4.7.0') format('woff2'), url('../fonts/fontawesome-webfont.woff?v=4.7.0') format('woff'), url('../fonts/fontawesome-webfont.ttf?v=4.7.0') format('truetype'), url('../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular') format('svg'); font-weight: normal; font-style: normal }.fa { display: inline-block; font: normal normal normal 14px/1 FontAwesome; font-size: inherit; text-rendering: auto; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale }.fa-lg { font-size: 1.33333333em; line-height: .75em; vertical-align: -15% }.fa-2x { font-size: 2em }.fa-3x { font-size: 3em }.fa-4x { font-size: 4em }.fa-5x { font-size: 5em }.fa-fw { width: 1.28571429em; text-align: center }.fa-ul { padding-left: 0; margin-left: 2.14285714em; list-style-type: none }.fa-ul>li { position: relative }.fa-li { position: absolute; left: -2.14285714em; width: 2.14285714em; top: .14285714em; text-align: center }.fa-li.fa-lg { left: -1.85714286em }.fa-border { padding: .2em .25em .15em; border: solid .08em #eee; border-radius: .1em }.fa-pull-left { float: left }.fa-pull-right { float: right }.fa.fa-pull-left { margin-right: .3em }.fa.fa-pull-right { margin-left: .3em }.pull-right { float: right }.pull-left { float: left }.fa.pull-left { margin-right: .3em }.fa.pull-right { margin-left: .3em }.fa-spin { -webkit-animation: fa-spin 2s infinite linear; animation: fa-spin 2s infinite linear }.fa-pulse { -webkit-animation: fa-spin 1s infinite steps(8); animation: fa-spin 1s infinite steps(8) }@-webkit-keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } 100% { -webkit-transform: rotate(359deg); transform: rotate(359deg) } }@keyframes fa-spin { 0% { -webkit-transform: rotate(0deg); transform: rotate(0deg) } 100% { -webkit-transform: rotate(359deg); transform: rotate(359deg) } }.fa-rotate-90 { -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)"; -webkit-transform: rotate(90deg); -ms-transform: rotate(90deg); transform: rotate(90deg) }.fa-rotate-180 { -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)"; -webkit-transform: rotate(180deg); -ms-transform: rotate(180deg); transform: rotate(180deg) }.fa-rotate-270 { -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)"; -webkit-transform: rotate(270deg); -ms-transform: rotate(270deg); transform: rotate(270deg) }.fa-flip-horizontal { -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)"; -webkit-transform: scale(-1, 1); -ms-transform: scale(-1, 1); transform: scale(-1, 1) }.fa-flip-vertical { -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)"; -webkit-transform: scale(1, -1); -ms-transform: scale(1, -1); transform: scale(1, -1) }:root .fa-rotate-90, :root .fa-rotate-180, :root .fa-rotate-270, :root .fa-flip-horizontal, :root .fa-flip-vertical { filter: none }.fa-stack { position: relative; display: inline-block; width: 2em; height: 2em; line-height: 2em; vertical-align: middle }.fa-stack-1x, .fa-stack-2x { position: absolute; left: 0; width: 100%; text-align: center }.fa-stack-1x { line-height: inherit }.fa-stack-2x { font-size: 2em }.fa-inverse { color: #fff }.fa-glass:before { content: "f000" }.fa-music:before { content: "f001" }.fa-search:before { content: "f002" }.fa-envelope-o:before { content: "f003" }.fa-heart:before { content: "f004" }.fa-star:before { content: "f005" }.fa-star-o:before { content: "f006" }.fa-user:before { content: "f007" }.fa-film:before { content: "f008" }.fa-th-large:before { content: "f009" }.fa-th:before { content: "f00a" }.fa-th-list:before { content: "f00b" }.fa-check:before { content: "f00c" }.fa-remove:before, .fa-close:before, .fa-times:before { content: "f00d" }.fa-search-plus:before { content: "f00e" }.fa-search-minus:before { content: "f010" }.fa-power-off:before { content: "f011" }.fa-signal:before { content: "f012" }.fa-gear:before, .fa-cog:before { content: "f013" }.fa-trash-o:before { content: "f014" }.fa-home:before { content: "f015" }.fa-file-o:before { content: "f016" }.fa-clock-o:before { content: "f017" }.fa-road:before { content: "f018" }.fa-download:before { content: "f019" }.fa-arrow-circle-o-down:before { content: "f01a" }.fa-arrow-circle-o-up:before { content: "f01b" }.fa-inbox:before { content: "f01c" }.fa-play-circle-o:before { content: "f01d" }.fa-rotate-right:before, .fa-repeat:before { content: "f01e" }.fa-refresh:before { content: "f021" }.fa-list-alt:before { content: "f022" }.fa-lock:before { content: "f023" }.fa-flag:before { content: "f024" }.fa-headphones:before { content: "f025" }.fa-volume-off:before { content: "f026" }.fa-volume-down:before { content: "f027" }.fa-volume-up:before { content: "f028" }.fa-qrcode:before { content: "f029" }.fa-barcode:before { content: "f02a" }.fa-tag:before { content: "f02b" }.fa-tags:before { content: "f02c" }.fa-book:before { content: "f02d" }.fa-bookmark:before { content: "f02e" }.fa-print:before { content: "f02f" }.fa-camera:before { content: "f030" }.fa-font:before { content: "f031" }.fa-bold:before { content: "f032" }.fa-italic:before { content: "f033" }.fa-text-height:before { content: "f034" }.fa-text-width:before { content: "f035" }.fa-align-left:before { content: "f036" }.fa-align-center:before { content: "f037" }.fa-align-right:before { content: "f038" }.fa-align-justify:before { content: "f039" }.fa-list:before { content: "f03a" }.fa-dedent:before, .fa-outdent:before { content: "f03b" }.fa-indent:before { content: "f03c" }.fa-video-camera:before { content: "f03d" }.fa-photo:before, .fa-image:before, .fa-picture-o:before { content: "f03e" }.fa-pencil:before { content: "f040" }.fa-map-marker:before { content: "f041" }.fa-adjust:before { content: "f042" }.fa-tint:before { content: "f043" }.fa-edit:before, .fa-pencil-square-o:before { content: "f044" }.fa-share-square-o:before { content: "f045" }.fa-check-square-o:before { content: "f046" }.fa-arrows:before { content: "f047" }.fa-step-backward:before { content: "f048" }.fa-fast-backward:before { content: "f049" }.fa-backward:before { content: "f04a" }.fa-play:before { content: "f04b" }.fa-pause:before { content: "f04c" }.fa-stop:before { content: "f04d" }.fa-forward:before { content: "f04e" }.fa-fast-forward:before { content: "f050" }.fa-step-forward:before { content: "f051" }.fa-eject:before { content: "f052" }.fa-chevron-left:before { content: "f053" }.fa-chevron-right:before { content: "f054" }.fa-plus-circle:before { content: "f055" }.fa-minus-circle:before { content: "f056" }.fa-times-circle:before { content: "f057" }.fa-check-circle:before { content: "f058" }.fa-question-circle:before { content: "f059" }.fa-info-circle:before { content: "f05a" }.fa-crosshairs:before { content: "f05b" }.fa-times-circle-o:before { content: "f05c" }.fa-check-circle-o:before { content: "f05d" }.fa-ban:before { content: "f05e" }.fa-arrow-left:before { content: "f060" }.fa-arrow-right:before { content: "f061" }.fa-arrow-up:before { content: "f062" }.fa-arrow-down:before { content: "f063" }.fa-mail-forward:before, .fa-share:before { content: "f064" }.fa-expand:before { content: "f065" }.fa-compress:before { content: "f066" }.fa-plus:before { content: "f067" }.fa-minus:before { content: "f068" }.fa-asterisk:before { content: "f069" }.fa-exclamation-circle:before { content: "f06a" }.fa-gift:before { content: "f06b" }.fa-leaf:before { content: "f06c" }.fa-fire:before { content: "f06d" }.fa-eye:before { content: "f06e" }.fa-eye-slash:before { content: "f070" }.fa-warning:before, .fa-exclamation-triangle:before { content: "f071" }.fa-plane:before { content: "f072" }.fa-calendar:before { content: "f073" }.fa-random:before { content: "f074" }.fa-comment:before { content: "f075" }.fa-magnet:before { content: "f076" }.fa-chevron-up:before { content: "f077" }.fa-chevron-down:before { content: "f078" }.fa-retweet:before { content: "f079" }.fa-shopping-cart:before { content: "f07a" }.fa-folder:before { content: "f07b" }.fa-folder-open:before { content: "f07c" }.fa-arrows-v:before { content: "f07d" }.fa-arrows-h:before { content: "f07e" }.fa-bar-chart-o:before, .fa-bar-chart:before { content: "f080" }.fa-twitter-square:before { content: "f081" }.fa-facebook-square:before { content: "f082" }.fa-camera-retro:before { content: "f083" }.fa-key:before { content: "f084" }.fa-gears:before, .fa-cogs:before { content: "f085" }.fa-comments:before { content: "f086" }.fa-thumbs-o-up:before { content: "f087" }.fa-thumbs-o-down:before { content: "f088" }.fa-star-half:before { content: "f089" }.fa-heart-o:before { content: "f08a" }.fa-sign-out:before { content: "f08b" }.fa-linkedin-square:before { content: "f08c" }.fa-thumb-tack:before { content: "f08d" }.fa-external-link:before { content: "f08e" }.fa-sign-in:before { content: "f090" }.fa-trophy:before { content: "f091" }.fa-github-square:before { content: "f092" }.fa-upload:before { content: "f093" }.fa-lemon-o:before { content: "f094" }.fa-phone:before { content: "f095" }.fa-square-o:before { content: "f096" }.fa-bookmark-o:before { content: "f097" }.fa-phone-square:before { content: "f098" }.fa-twitter:before { content: "f099" }.fa-facebook-f:before, .fa-facebook:before { content: "f09a" }.fa-github:before { content: "f09b" }.fa-unlock:before { content: "f09c" }.fa-credit-card:before { content: "f09d" }.fa-feed:before, .fa-rss:before { content: "f09e" }.fa-hdd-o:before { content: "f0a0" }.fa-bullhorn:before { content: "f0a1" }.fa-bell:before { content: "f0f3" }.fa-certificate:before { content: "f0a3" }.fa-hand-o-right:before { content: "f0a4" }.fa-hand-o-left:before { content: "f0a5" }.fa-hand-o-up:before { content: "f0a6" }.fa-hand-o-down:before { content: "f0a7" }.fa-arrow-circle-left:before { content: "f0a8" }.fa-arrow-circle-right:before { content: "f0a9" }.fa-arrow-circle-up:before { content: "f0aa" }.fa-arrow-circle-down:before { content: "f0ab" }.fa-globe:before { content: "f0ac" }.fa-wrench:before { content: "f0ad" }.fa-tasks:before { content: "f0ae" }.fa-filter:before { content: "f0b0" }.fa-briefcase:before { content: "f0b1" }.fa-arrows-alt:before { content: "f0b2" }.fa-group:before, .fa-users:before { content: "f0c0" }.fa-chain:before, .fa-link:before { content: "f0c1" }.fa-cloud:before { content: "f0c2" }.fa-flask:before { content: "f0c3" }.fa-cut:before, .fa-scissors:before { content: "f0c4" }.fa-copy:before, .fa-files-o:before { content: "f0c5" }.fa-paperclip:before { content: "f0c6" }.fa-save:before, .fa-floppy-o:before { content: "f0c7" }.fa-square:before { content: "f0c8" }.fa-navicon:before, .fa-reorder:before, .fa-bars:before { content: "f0c9" }.fa-list-ul:before { content: "f0ca" }.fa-list-ol:before { content: "f0cb" }.fa-strikethrough:before { content: "f0cc" }.fa-underline:before { content: "f0cd" }.fa-table:before { content: "f0ce" }.fa-magic:before { content: "f0d0" }.fa-truck:before { content: "f0d1" }.fa-pinterest:before { content: "f0d2" }.fa-pinterest-square:before { content: "f0d3" }.fa-google-plus-square:before { content: "f0d4" }.fa-google-plus:before { content: "f0d5" }.fa-money:before { content: "f0d6" }.fa-caret-down:before { content: "f0d7" }.fa-caret-up:before { content: "f0d8" }.fa-caret-left:before { content: "f0d9" }.fa-caret-right:before { content: "f0da" }.fa-columns:before { content: "f0db" }.fa-unsorted:before, .fa-sort:before { content: "f0dc" }.fa-sort-down:before, .fa-sort-desc:before { content: "f0dd" }.fa-sort-up:before, .fa-sort-asc:before { content: "f0de" }.fa-envelope:before { content: "f0e0" }.fa-linkedin:before { content: "f0e1" }.fa-rotate-left:before, .fa-undo:before { content: "f0e2" }.fa-legal:before, .fa-gavel:before { content: "f0e3" }.fa-dashboard:before, .fa-tachometer:before { content: "f0e4" }.fa-comment-o:before { content: "f0e5" }.fa-comments-o:before { content: "f0e6" }.fa-flash:before, .fa-bolt:before { content: "f0e7" }.fa-sitemap:before { content: "f0e8" }.fa-umbrella:before { content: "f0e9" }.fa-paste:before, .fa-clipboard:before { content: "f0ea" }.fa-lightbulb-o:before { content: "f0eb" }.fa-exchange:before { content: "f0ec" }.fa-cloud-download:before { content: "f0ed" }.fa-cloud-upload:before { content: "f0ee" }.fa-user-md:before { content: "f0f0" }.fa-stethoscope:before { content: "f0f1" }.fa-suitcase:before { content: "f0f2" }.fa-bell-o:before { content: "f0a2" }.fa-coffee:before { content: "f0f4" }.fa-cutlery:before { content: "f0f5" }.fa-file-text-o:before { content: "f0f6" }.fa-building-o:before { content: "f0f7" }.fa-hospital-o:before { content: "f0f8" }.fa-ambulance:before { content: "f0f9" }.fa-medkit:before { content: "f0fa" }.fa-fighter-jet:before { content: "f0fb" }.fa-beer:before { content: "f0fc" }.fa-h-square:before { content: "f0fd" }.fa-plus-square:before { content: "f0fe" }.fa-angle-double-left:before { content: "f100" }.fa-angle-double-right:before { content: "f101" }.fa-angle-double-up:before { content: "f102" }.fa-angle-double-down:before { content: "f103" }.fa-angle-left:before { content: "f104" }.fa-angle-right:before { content: "f105" }.fa-angle-up:before { content: "f106" }.fa-angle-down:before { content: "f107" }.fa-desktop:before { content: "f108" }.fa-laptop:before { content: "f109" }.fa-tablet:before { content: "f10a" }.fa-mobile-phone:before, .fa-mobile:before { content: "f10b" }.fa-circle-o:before { content: "f10c" }.fa-quote-left:before { content: "f10d" }.fa-quote-right:before { content: "f10e" }.fa-spinner:before { content: "f110" }.fa-circle:before { content: "f111" }.fa-mail-reply:before, .fa-reply:before { content: "f112" }.fa-github-alt:before { content: "f113" }.fa-folder-o:before { content: "f114" }.fa-folder-open-o:before { content: "f115" }.fa-smile-o:before { content: "f118" }.fa-frown-o:before { content: "f119" }.fa-meh-o:before { content: "f11a" }.fa-gamepad:before { content: "f11b" }.fa-keyboard-o:before { content: "f11c" }.fa-flag-o:before { content: "f11d" }.fa-flag-checkered:before { content: "f11e" }.fa-terminal:before { content: "f120" }.fa-code:before { content: "f121" }.fa-mail-reply-all:before, .fa-reply-all:before { content: "f122" }.fa-star-half-empty:before, .fa-star-half-full:before, .fa-star-half-o:before { content: "f123" }.fa-location-arrow:before { content: "f124" }.fa-crop:before { content: "f125" }.fa-code-fork:before { content: "f126" }.fa-unlink:before, .fa-chain-broken:before { content: "f127" }.fa-question:before { content: "f128" }.fa-info:before { content: "f129" }.fa-exclamation:before { content: "f12a" }.fa-superscript:before { content: "f12b" }.fa-subscript:before { content: "f12c" }.fa-eraser:before { content: "f12d" }.fa-puzzle-piece:before { content: "f12e" }.fa-microphone:before { content: "f130" }.fa-microphone-slash:before { content: "f131" }.fa-shield:before { content: "f132" }.fa-calendar-o:before { content: "f133" }.fa-fire-extinguisher:before { content: "f134" }.fa-rocket:before { content: "f135" }.fa-maxcdn:before { content: "f136" }.fa-chevron-circle-left:before { content: "f137" }.fa-chevron-circle-right:before { content: "f138" }.fa-chevron-circle-up:before { content: "f139" }.fa-chevron-circle-down:before { content: "f13a" }.fa-html5:before { content: "f13b" }.fa-css3:before { content: "f13c" }.fa-anchor:before { content: "f13d" }.fa-unlock-alt:before { content: "f13e" }.fa-bullseye:before { content: "f140" }.fa-ellipsis-h:before { content: "f141" }.fa-ellipsis-v:before { content: "f142" }.fa-rss-square:before { content: "f143" }.fa-play-circle:before { content: "f144" }.fa-ticket:before { content: "f145" }.fa-minus-square:before { content: "f146" }.fa-minus-square-o:before { content: "f147" }.fa-level-up:before { content: "f148" }.fa-level-down:before { content: "f149" }.fa-check-square:before { content: "f14a" }.fa-pencil-square:before { content: "f14b" }.fa-external-link-square:before { content: "f14c" }.fa-share-square:before { content: "f14d" }.fa-compass:before { content: "f14e" }.fa-toggle-down:before, .fa-caret-square-o-down:before { content: "f150" }.fa-toggle-up:before, .fa-caret-square-o-up:before { content: "f151" }.fa-toggle-right:before, .fa-caret-square-o-right:before { content: "f152" }.fa-euro:before, .fa-eur:before { content: "f153" }.fa-gbp:before { content: "f154" }.fa-dollar:before, .fa-usd:before { content: "f155" }.fa-rupee:before, .fa-inr:before { content: "f156" }.fa-cny:before, .fa-rmb:before, .fa-yen:before, .fa-jpy:before { content: "f157" }.fa-ruble:before, .fa-rouble:before, .fa-rub:before { content: "f158" }.fa-won:before, .fa-krw:before { content: "f159" }.fa-bitcoin:before, .fa-btc:before { content: "f15a" }.fa-file:before { content: "f15b" }.fa-file-text:before { content: "f15c" }.fa-sort-alpha-asc:before { content: "f15d" }.fa-sort-alpha-desc:before { content: "f15e" }.fa-sort-amount-asc:before { content: "f160" }.fa-sort-amount-desc:before { content: "f161" }.fa-sort-numeric-asc:before { content: "f162" }.fa-sort-numeric-desc:before { content: "f163" }.fa-thumbs-up:before { content: "f164" }.fa-thumbs-down:before { content: "f165" }.fa-youtube-square:before { content: "f166" }.fa-youtube:before { content: "f167" }.fa-xing:before { content: "f168" }.fa-xing-square:before { content: "f169" }.fa-youtube-play:before { content: "f16a" }.fa-dropbox:before { content: "f16b" }.fa-stack-overflow:before { content: "f16c" }.fa-instagram:before { content: "f16d" }.fa-flickr:before { content: "f16e" }.fa-adn:before { content: "f170" }.fa-bitbucket:before { content: "f171" }.fa-bitbucket-square:before { content: "f172" }.fa-tumblr:before { content: "f173" }.fa-tumblr-square:before { content: "f174" }.fa-long-arrow-down:before { content: "f175" }.fa-long-arrow-up:before { content: "f176" }.fa-long-arrow-left:before { content: "f177" }.fa-long-arrow-right:before { content: "f178" }.fa-apple:before { content: "f179" }.fa-windows:before { content: "f17a" }.fa-android:before { content: "f17b" }.fa-linux:before { content: "f17c" }.fa-dribbble:before { content: "f17d" }.fa-skype:before { content: "f17e" }.fa-foursquare:before { content: "f180" }.fa-trello:before { content: "f181" }.fa-female:before { content: "f182" }.fa-male:before { content: "f183" }.fa-gittip:before, .fa-gratipay:before { content: "f184" }.fa-sun-o:before { content: "f185" }.fa-moon-o:before { content: "f186" }.fa-archive:before { content: "f187" }.fa-bug:before { content: "f188" }.fa-vk:before { content: "f189" }.fa-weibo:before { content: "f18a" }.fa-renren:before { content: "f18b" }.fa-pagelines:before { content: "f18c" }.fa-stack-exchange:before { content: "f18d" }.fa-arrow-circle-o-right:before { content: "f18e" }.fa-arrow-circle-o-left:before { content: "f190" }.fa-toggle-left:before, .fa-caret-square-o-left:before { content: "f191" }.fa-dot-circle-o:before { content: "f192" }.fa-wheelchair:before { content: "f193" }.fa-vimeo-square:before { content: "f194" }.fa-turkish-lira:before, .fa-try:before { content: "f195" }.fa-plus-square-o:before { content: "f196" }.fa-space-shuttle:before { content: "f197" }.fa-slack:before { content: "f198" }.fa-envelope-square:before { content: "f199" }.fa-wordpress:before { content: "f19a" }.fa-openid:before { content: "f19b" }.fa-institution:before, .fa-bank:before, .fa-university:before { content: "f19c" }.fa-mortar-board:before, .fa-graduation-cap:before { content: "f19d" }.fa-yahoo:before { content: "f19e" }.fa-google:before { content: "f1a0" }.fa-reddit:before { content: "f1a1" }.fa-reddit-square:before { content: "f1a2" }.fa-stumbleupon-circle:before { content: "f1a3" }.fa-stumbleupon:before { content: "f1a4" }.fa-delicious:before { content: "f1a5" }.fa-digg:before { content: "f1a6" }.fa-pied-piper-pp:before { content: "f1a7" }.fa-pied-piper-alt:before { content: "f1a8" }.fa-drupal:before { content: "f1a9" }.fa-joomla:before { content: "f1aa" }.fa-language:before { content: "f1ab" }.fa-fax:before { content: "f1ac" }.fa-building:before { content: "f1ad" }.fa-child:before { content: "f1ae" }.fa-paw:before { content: "f1b0" }.fa-spoon:before { content: "f1b1" }.fa-cube:before { content: "f1b2" }.fa-cubes:before { content: "f1b3" }.fa-behance:before { content: "f1b4" }.fa-behance-square:before { content: "f1b5" }.fa-steam:before { content: "f1b6" }.fa-steam-square:before { content: "f1b7" }.fa-recycle:before { content: "f1b8" }.fa-automobile:before, .fa-car:before { content: "f1b9" }.fa-cab:before, .fa-taxi:before { content: "f1ba" }.fa-tree:before { content: "f1bb" }.fa-spotify:before { content: "f1bc" }.fa-deviantart:before { content: "f1bd" }.fa-soundcloud:before { content: "f1be" }.fa-database:before { content: "f1c0" }.fa-file-pdf-o:before { content: "f1c1" }.fa-file-word-o:before { content: "f1c2" }.fa-file-excel-o:before { content: "f1c3" }.fa-file-powerpoint-o:before { content: "f1c4" }.fa-file-photo-o:before, .fa-file-picture-o:before, .fa-file-image-o:before { content: "f1c5" }.fa-file-zip-o:before, .fa-file-archive-o:before { content: "f1c6" }.fa-file-sound-o:before, .fa-file-audio-o:before { content: "f1c7" }.fa-file-movie-o:before, .fa-file-video-o:before { content: "f1c8" }.fa-file-code-o:before { content: "f1c9" }.fa-vine:before { content: "f1ca" }.fa-codepen:before { content: "f1cb" }.fa-jsfiddle:before { content: "f1cc" }.fa-life-bouy:before, .fa-life-buoy:before, .fa-life-saver:before, .fa-support:before, .fa-life-ring:before { content: "f1cd" }.fa-circle-o-notch:before { content: "f1ce" }.fa-ra:before, .fa-resistance:before, .fa-rebel:before { content: "f1d0" }.fa-ge:before, .fa-empire:before { content: "f1d1" }.fa-git-square:before { content: "f1d2" }.fa-git:before { content: "f1d3" }.fa-y-combinator-square:before, .fa-yc-square:before, .fa-hacker-news:before { content: "f1d4" }.fa-tencent-weibo:before { content: "f1d5" }.fa-qq:before { content: "f1d6" }.fa-wechat:before, .fa-weixin:before { content: "f1d7" }.fa-send:before, .fa-paper-plane:before { content: "f1d8" }.fa-send-o:before, .fa-paper-plane-o:before { content: "f1d9" }.fa-history:before { content: "f1da" }.fa-circle-thin:before { content: "f1db" }.fa-header:before { content: "f1dc" }.fa-paragraph:before { content: "f1dd" }.fa-sliders:before { content: "f1de" }.fa-share-alt:before { content: "f1e0" }.fa-share-alt-square:before { content: "f1e1" }.fa-bomb:before { content: "f1e2" }.fa-soccer-ball-o:before, .fa-futbol-o:before { content: "f1e3" }.fa-tty:before { content: "f1e4" }.fa-binoculars:before { content: "f1e5" }.fa-plug:before { content: "f1e6" }.fa-slideshare:before { content: "f1e7" }.fa-twitch:before { content: "f1e8" }.fa-yelp:before { content: "f1e9" }.fa-newspaper-o:before { content: "f1ea" }.fa-wifi:before { content: "f1eb" }.fa-calculator:before { content: "f1ec" }.fa-paypal:before { content: "f1ed" }.fa-google-wallet:before { content: "f1ee" }.fa-cc-visa:before { content: "f1f0" }.fa-cc-mastercard:before { content: "f1f1" }.fa-cc-discover:before { content: "f1f2" }.fa-cc-amex:before { content: "f1f3" }.fa-cc-paypal:before { content: "f1f4" }.fa-cc-stripe:before { content: "f1f5" }.fa-bell-slash:before { content: "f1f6" }.fa-bell-slash-o:before { content: "f1f7" }.fa-trash:before { content: "f1f8" }.fa-copyright:before { content: "f1f9" }.fa-at:before { content: "f1fa" }.fa-eyedropper:before { content: "f1fb" }.fa-paint-brush:before { content: "f1fc" }.fa-birthday-cake:before { content: "f1fd" }.fa-area-chart:before { content: "f1fe" }.fa-pie-chart:before { content: "f200" }.fa-line-chart:before { content: "f201" }.fa-lastfm:before { content: "f202" }.fa-lastfm-square:before { content: "f203" }.fa-toggle-off:before { content: "f204" }.fa-toggle-on:before { content: "f205" }.fa-bicycle:before { content: "f206" }.fa-bus:before { content: "f207" }.fa-ioxhost:before { content: "f208" }.fa-angellist:before { content: "f209" }.fa-cc:before { content: "f20a" }.fa-shekel:before, .fa-sheqel:before, .fa-ils:before { content: "f20b" }.fa-meanpath:before { content: "f20c" }.fa-buysellads:before { content: "f20d" }.fa-connectdevelop:before { content: "f20e" }.fa-dashcube:before { content: "f210" }.fa-forumbee:before { content: "f211" }.fa-leanpub:before { content: "f212" }.fa-sellsy:before { content: "f213" }.fa-shirtsinbulk:before { content: "f214" }.fa-simplybuilt:before { content: "f215" }.fa-skyatlas:before { content: "f216" }.fa-cart-plus:before { content: "f217" }.fa-cart-arrow-down:before { content: "f218" }.fa-diamond:before { content: "f219" }.fa-ship:before { content: "f21a" }.fa-user-secret:before { content: "f21b" }.fa-motorcycle:before { content: "f21c" }.fa-street-view:before { content: "f21d" }.fa-heartbeat:before { content: "f21e" }.fa-venus:before { content: "f221" }.fa-mars:before { content: "f222" }.fa-mercury:before { content: "f223" }.fa-intersex:before, .fa-transgender:before { content: "f224" }.fa-transgender-alt:before { content: "f225" }.fa-venus-double:before { content: "f226" }.fa-mars-double:before { content: "f227" }.fa-venus-mars:before { content: "f228" }.fa-mars-stroke:before { content: "f229" }.fa-mars-stroke-v:before { content: "f22a" }.fa-mars-stroke-h:before { content: "f22b" }.fa-neuter:before { content: "f22c" }.fa-genderless:before { content: "f22d" }.fa-facebook-official:before { content: "f230" }.fa-pinterest-p:before { content: "f231" }.fa-whatsapp:before { content: "f232" }.fa-server:before { content: "f233" }.fa-user-plus:before { content: "f234" }.fa-user-times:before { content: "f235" }.fa-hotel:before, .fa-bed:before { content: "f236" }.fa-viacoin:before { content: "f237" }.fa-train:before { content: "f238" }.fa-subway:before { content: "f239" }.fa-medium:before { content: "f23a" }.fa-yc:before, .fa-y-combinator:before { content: "f23b" }.fa-optin-monster:before { content: "f23c" }.fa-opencart:before { content: "f23d" }.fa-expeditedssl:before { content: "f23e" }.fa-battery-4:before, .fa-battery:before, .fa-battery-full:before { content: "f240" }.fa-battery-3:before, .fa-battery-three-quarters:before { content: "f241" }.fa-battery-2:before, .fa-battery-half:before { content: "f242" }.fa-battery-1:before, .fa-battery-quarter:before { content: "f243" }.fa-battery-0:before, .fa-battery-empty:before { content: "f244" }.fa-mouse-pointer:before { content: "f245" }.fa-i-cursor:before { content: "f246" }.fa-object-group:before { content: "f247" }.fa-object-ungroup:before { content: "f248" }.fa-sticky-note:before { content: "f249" }.fa-sticky-note-o:before { content: "f24a" }.fa-cc-jcb:before { content: "f24b" }.fa-cc-diners-club:before { content: "f24c" }.fa-clone:before { content: "f24d" }.fa-balance-scale:before { content: "f24e" }.fa-hourglass-o:before { content: "f250" }.fa-hourglass-1:before, .fa-hourglass-start:before { content: "f251" }.fa-hourglass-2:before, .fa-hourglass-half:before { content: "f252" }.fa-hourglass-3:before, .fa-hourglass-end:before { content: "f253" }.fa-hourglass:before { content: "f254" }.fa-hand-grab-o:before, .fa-hand-rock-o:before { content: "f255" }.fa-hand-stop-o:before, .fa-hand-paper-o:before { content: "f256" }.fa-hand-scissors-o:before { content: "f257" }.fa-hand-lizard-o:before { content: "f258" }.fa-hand-spock-o:before { content: "f259" }.fa-hand-pointer-o:before { content: "f25a" }.fa-hand-peace-o:before { content: "f25b" }.fa-trademark:before { content: "f25c" }.fa-registered:before { content: "f25d" }.fa-creative-commons:before { content: "f25e" }.fa-gg:before { content: "f260" }.fa-gg-circle:before { content: "f261" }.fa-tripadvisor:before { content: "f262" }.fa-odnoklassniki:before { content: "f263" }.fa-odnoklassniki-square:before { content: "f264" }.fa-get-pocket:before { content: "f265" }.fa-wikipedia-w:before { content: "f266" }.fa-safari:before { content: "f267" }.fa-chrome:before { content: "f268" }.fa-firefox:before { content: "f269" }.fa-opera:before { content: "f26a" }.fa-internet-explorer:before { content: "f26b" }.fa-tv:before, .fa-television:before { content: "f26c" }.fa-contao:before { content: "f26d" }.fa-500px:before { content: "f26e" }.fa-amazon:before { content: "f270" }.fa-calendar-plus-o:before { content: "f271" }.fa-calendar-minus-o:before { content: "f272" }.fa-calendar-times-o:before { content: "f273" }.fa-calendar-check-o:before { content: "f274" }.fa-industry:before { content: "f275" }.fa-map-pin:before { content: "f276" }.fa-map-signs:before { content: "f277" }.fa-map-o:before { content: "f278" }.fa-map:before { content: "f279" }.fa-commenting:before { content: "f27a" }.fa-commenting-o:before { content: "f27b" }.fa-houzz:before { content: "f27c" }.fa-vimeo:before { content: "f27d" }.fa-black-tie:before { content: "f27e" }.fa-fonticons:before { content: "f280" }.fa-reddit-alien:before { content: "f281" }.fa-edge:before { content: "f282" }.fa-credit-card-alt:before { content: "f283" }.fa-codiepie:before { content: "f284" }.fa-modx:before { content: "f285" }.fa-fort-awesome:before { content: "f286" }.fa-usb:before { content: "f287" }.fa-product-hunt:before { content: "f288" }.fa-mixcloud:before { content: "f289" }.fa-scribd:before { content: "f28a" }.fa-pause-circle:before { content: "f28b" }.fa-pause-circle-o:before { content: "f28c" }.fa-stop-circle:before { content: "f28d" }.fa-stop-circle-o:before { content: "f28e" }.fa-shopping-bag:before { content: "f290" }.fa-shopping-basket:before { content: "f291" }.fa-hashtag:before { content: "f292" }.fa-bluetooth:before { content: "f293" }.fa-bluetooth-b:before { content: "f294" }.fa-percent:before { content: "f295" }.fa-gitlab:before { content: "f296" }.fa-wpbeginner:before { content: "f297" }.fa-wpforms:before { content: "f298" }.fa-envira:before { content: "f299" }.fa-universal-access:before { content: "f29a" }.fa-wheelchair-alt:before { content: "f29b" }.fa-question-circle-o:before { content: "f29c" }.fa-blind:before { content: "f29d" }.fa-audio-description:before { content: "f29e" }.fa-volume-control-phone:before { content: "f2a0" }.fa-braille:before { content: "f2a1" }.fa-assistive-listening-systems:before { content: "f2a2" }.fa-asl-interpreting:before, .fa-american-sign-language-interpreting:before { content: "f2a3" }.fa-deafness:before, .fa-hard-of-hearing:before, .fa-deaf:before { content: "f2a4" }.fa-glide:before { content: "f2a5" }.fa-glide-g:before { content: "f2a6" }.fa-signing:before, .fa-sign-language:before { content: "f2a7" }.fa-low-vision:before { content: "f2a8" }.fa-viadeo:before { content: "f2a9" }.fa-viadeo-square:before { content: "f2aa" }.fa-snapchat:before { content: "f2ab" }.fa-snapchat-ghost:before { content: "f2ac" }.fa-snapchat-square:before { content: "f2ad" }.fa-pied-piper:before { content: "f2ae" }.fa-first-order:before { content: "f2b0" }.fa-yoast:before { content: "f2b1" }.fa-themeisle:before { content: "f2b2" }.fa-google-plus-circle:before, .fa-google-plus-official:before { content: "f2b3" }.fa-fa:before, .fa-font-awesome:before { content: "f2b4" }.fa-handshake-o:before { content: "f2b5" }.fa-envelope-open:before { content: "f2b6" }.fa-envelope-open-o:before { content: "f2b7" }.fa-linode:before { content: "f2b8" }.fa-address-book:before { content: "f2b9" }.fa-address-book-o:before { content: "f2ba" }.fa-vcard:before, .fa-address-card:before { content: "f2bb" }.fa-vcard-o:before, .fa-address-card-o:before { content: "f2bc" }.fa-user-circle:before { content: "f2bd" }.fa-user-circle-o:before { content: "f2be" }.fa-user-o:before { content: "f2c0" }.fa-id-badge:before { content: "f2c1" }.fa-drivers-license:before, .fa-id-card:before { content: "f2c2" }.fa-drivers-license-o:before, .fa-id-card-o:before { content: "f2c3" }.fa-quora:before { content: "f2c4" }.fa-free-code-camp:before { content: "f2c5" }.fa-telegram:before { content: "f2c6" }.fa-thermometer-4:before, .fa-thermometer:before, .fa-thermometer-full:before { content: "f2c7" }.fa-thermometer-3:before, .fa-thermometer-three-quarters:before { content: "f2c8" }.fa-thermometer-2:before, .fa-thermometer-half:before { content: "f2c9" }.fa-thermometer-1:before, .fa-thermometer-quarter:before { content: "f2ca" }.fa-thermometer-0:before, .fa-thermometer-empty:before { content: "f2cb" }.fa-shower:before { content: "f2cc" }.fa-bathtub:before, .fa-s15:before, .fa-bath:before { content: "f2cd" }.fa-podcast:before { content: "f2ce" }.fa-window-maximize:before { content: "f2d0" }.fa-window-minimize:before { content: "f2d1" }.fa-window-restore:before { content: "f2d2" }.fa-times-rectangle:before, .fa-window-close:before { content: "f2d3" }.fa-times-rectangle-o:before, .fa-window-close-o:before { content: "f2d4" }.fa-bandcamp:before { content: "f2d5" }.fa-grav:before { content: "f2d6" }.fa-etsy:before { content: "f2d7" }.fa-imdb:before { content: "f2d8" }.fa-ravelry:before { content: "f2d9" }.fa-eercast:before { content: "f2da" }.fa-microchip:before { content: "f2db" }.fa-snowflake-o:before { content: "f2dc" }.fa-superpowers:before { content: "f2dd" }.fa-wpexplorer:before { content: "f2de" }.fa-meetup:before { content: "f2e0" }.sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); border: 0 }.sr-only-focusable:active, .sr-only-focusable:focus { position: static; width: auto; height: auto; margin: 0; overflow: visible; clip: auto }"use strict"; (function(root, factory) { if(typeof exports === 'object') { module.exports = factory(); } else if(typeof define === 'function' && define.amd) { define(['jquery', 'googlemaps!'], factory); } else { root.GMaps = factory(); }}(this, function() {/*! * GMaps.js v0.4.25 * http://hpneo.github.com/gmaps/ * * Copyright 2017, Gustavo Leon * Released under the MIT License. */var extend_object = function(obj, new_obj) { var name;if (obj === new_obj) { return obj; }for (name in new_obj) { if (new_obj[name] !== undefined) { obj[name] = new_obj[name]; } }return obj; };var replace_object = function(obj, replace) { var name;if (obj === replace) { return obj; }for (name in replace) { if (obj[name] != undefined) { obj[name] = replace[name]; } }return obj; };var array_map = function(array, callback) { var original_callback_params = Array.prototype.slice.call(arguments, 2), array_return = [], array_length = array.length, i;if (Array.prototype.map && array.map === Array.prototype.map) { array_return = Array.prototype.map.call(array, function(item) { var callback_params = original_callback_params.slice(0); callback_params.splice(0, 0, item);return callback.apply(this, callback_params); }); } else { for (i = 0; i < array_length; i++) { callback_params = original_callback_params; callback_params.splice(0, 0, array[i]); array_return.push(callback.apply(this, callback_params)); } }return array_return; };var array_flat = function(array) { var new_array = [], i;for (i = 0; i < array.length; i++) { new_array = new_array.concat(array[i]); }return new_array; };var coordsToLatLngs = function(coords, useGeoJSON) { var first_coord = coords[0], second_coord = coords[1];if (useGeoJSON) { first_coord = coords[1]; second_coord = coords[0]; }return new google.maps.LatLng(first_coord, second_coord); };var arrayToLatLng = function(coords, useGeoJSON) { var i;for (i = 0; i < coords.length; i++) { if (!(coords[i] instanceof google.maps.LatLng)) { if (coords[i].length > 0 && typeof(coords[i][0]) === "object") { coords[i] = arrayToLatLng(coords[i], useGeoJSON); } else { coords[i] = coordsToLatLngs(coords[i], useGeoJSON); } } }return coords; };var getElementsByClassName = function (class_name, context) { var element, _class = class_name.replace('.', '');if ('jQuery' in this && context) { element = $("." + _class, context)[0]; } else { element = document.getElementsByClassName(_class)[0]; } return element;};var getElementById = function(id, context) { var element, id = id.replace('#', '');if ('jQuery' in window && context) { element = $('#' + id, context)[0]; } else { element = document.getElementById(id); };return element; };var findAbsolutePosition = function(obj) { var curleft = 0, curtop = 0;if (obj.getBoundingClientRect) { var rect = obj.getBoundingClientRect(); var sx = -(window.scrollX ? window.scrollX : window.pageXOffset); var sy = -(window.scrollY ? window.scrollY : window.pageYOffset);return [(rect.left - sx), (rect.top - sy)]; }if (obj.offsetParent) { do { curleft += obj.offsetLeft; curtop += obj.offsetTop; } while (obj = obj.offsetParent); }return [curleft, curtop]; };var GMaps = (function(global) { "use strict";var doc = document; /** * Creates a new GMaps instance, including a Google Maps map. * @class GMaps * @constructs * @param {object} options - `options` accepts all the [MapOptions](https://developers.google.com/maps/documentation/javascript/reference#MapOptions) and [events](https://developers.google.com/maps/documentation/javascript/reference#Map) listed in the Google Maps API. Also accepts: * * `lat` (number): Latitude of the map's center * * `lng` (number): Longitude of the map's center * * `el` (string or HTMLElement): container where the map will be rendered * * `markerClusterer` (function): A function to create a marker cluster. You can use MarkerClusterer or MarkerClustererPlus. */ var GMaps = function(options) {if (!(typeof window.google === 'object' && window.google.maps)) { if (typeof window.console === 'object' && window.console.error) { console.error('Google Maps API is required. Please register the following JavaScript library https://maps.googleapis.com/maps/api/js.'); }return function() {}; }if (!this) return new GMaps(options);options.zoom = options.zoom || 15; options.mapType = options.mapType || 'roadmap';var valueOrDefault = function(value, defaultValue) { return value === undefined ? defaultValue : value; };var self = this, i, events_that_hide_context_menu = [ 'bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'idle', 'maptypeid_changed', 'projection_changed', 'resize', 'tilesloaded', 'zoom_changed' ], events_that_doesnt_hide_context_menu = ['mousemove', 'mouseout', 'mouseover'], options_to_be_deleted = ['el', 'lat', 'lng', 'mapType', 'width', 'height', 'markerClusterer', 'enableNewStyle'], identifier = options.el || options.div, markerClustererFunction = options.markerClusterer, mapType = google.maps.MapTypeId[options.mapType.toUpperCase()], map_center = new google.maps.LatLng(options.lat, options.lng), zoomControl = valueOrDefault(options.zoomControl, true), zoomControlOpt = options.zoomControlOpt || { style: 'DEFAULT', position: 'TOP_LEFT' }, zoomControlStyle = zoomControlOpt.style || 'DEFAULT', zoomControlPosition = zoomControlOpt.position || 'TOP_LEFT', panControl = valueOrDefault(options.panControl, true), mapTypeControl = valueOrDefault(options.mapTypeControl, true), scaleControl = valueOrDefault(options.scaleControl, true), streetViewControl = valueOrDefault(options.streetViewControl, true), overviewMapControl = valueOrDefault(overviewMapControl, true), map_options = {}, map_base_options = { zoom: this.zoom, center: map_center, mapTypeId: mapType }, map_controls_options = { panControl: panControl, zoomControl: zoomControl, zoomControlOptions: { style: google.maps.ZoomControlStyle[zoomControlStyle], position: google.maps.ControlPosition[zoomControlPosition] }, mapTypeControl: mapTypeControl, scaleControl: scaleControl, streetViewControl: streetViewControl, overviewMapControl: overviewMapControl };if (typeof(options.el) === 'string' || typeof(options.div) === 'string') { if (identifier.indexOf("#") > -1) { /** * Container element * * @type {HTMLElement} */ this.el = getElementById(identifier, options.context); } else { this.el = getElementsByClassName.apply(this, [identifier, options.context]); } } else { this.el = identifier; }if (typeof(this.el) === 'undefined' || this.el === null) { throw 'No element defined.'; }window.context_menu = window.context_menu || {}; window.context_menu[self.el.id] = {};/** * Collection of custom controls in the map UI * * @type {array} */ this.controls = []; /** * Collection of map's overlays * * @type {array} */ this.overlays = []; /** * Collection of KML/GeoRSS and FusionTable layers * * @type {array} */ this.layers = []; /** * Collection of data layers (See {@link GMaps#addLayer}) * * @type {object} */ this.singleLayers = {}; /** * Collection of map's markers * * @type {array} */ this.markers = []; /** * Collection of map's lines * * @type {array} */ this.polylines = []; /** * Collection of map's routes requested by {@link GMaps#getRoutes}, {@link GMaps#renderRoute}, {@link GMaps#drawRoute}, {@link GMaps#travelRoute} or {@link GMaps#drawSteppedRoute} * * @type {array} */ this.routes = []; /** * Collection of map's polygons * * @type {array} */ this.polygons = []; this.infoWindow = null; this.overlay_el = null; /** * Current map's zoom * * @type {number} */ this.zoom = options.zoom; this.registered_events = {};this.el.style.width = options.width || this.el.scrollWidth || this.el.offsetWidth; this.el.style.height = options.height || this.el.scrollHeight || this.el.offsetHeight;google.maps.visualRefresh = options.enableNewStyle;for (i = 0; i < options_to_be_deleted.length; i++) { delete options[options_to_be_deleted[i]]; }if(options.disableDefaultUI != true) { map_base_options = extend_object(map_base_options, map_controls_options); }map_options = extend_object(map_base_options, options);for (i = 0; i < events_that_hide_context_menu.length; i++) { delete map_options[events_that_hide_context_menu[i]]; }for (i = 0; i < events_that_doesnt_hide_context_menu.length; i++) { delete map_options[events_that_doesnt_hide_context_menu[i]]; }/** * Google Maps map instance * * @type {google.maps.Map} */ this.map = new google.maps.Map(this.el, map_options);if (markerClustererFunction) { /** * Marker Clusterer instance * * @type {object} */ this.markerClusterer = markerClustererFunction.apply(this, [this.map]); }var buildContextMenuHTML = function(control, e) { var html = '', options = window.context_menu[self.el.id][control];for (var i in options){ if (options.hasOwnProperty(i)) { var option = options[i];html += '<li><a id="' + control + '_' + i + '" href="#">' + option.title + '</a></li>'; } }if (!getElementById('gmaps_context_menu')) return;var context_menu_element = getElementById('gmaps_context_menu');context_menu_element.innerHTML = html;var context_menu_items = context_menu_element.getElementsByTagName('a'), context_menu_items_count = context_menu_items.length, i;for (i = 0; i < context_menu_items_count; i++) { var context_menu_item = context_menu_items[i];var assign_menu_item_action = function(ev){ ev.preventDefault();options[this.id.replace(control + '_', '')].action.apply(self, [e]); self.hideContextMenu(); };google.maps.event.clearListeners(context_menu_item, 'click'); google.maps.event.addDomListenerOnce(context_menu_item, 'click', assign_menu_item_action, false); }var position = findAbsolutePosition.apply(this, [self.el]), left = position[0] + e.pixel.x - 15, top = position[1] + e.pixel.y- 15;context_menu_element.style.left = left + "px"; context_menu_element.style.top = top + "px";// context_menu_element.style.display = 'block'; };this.buildContextMenu = function(control, e) { if (control === 'marker') { e.pixel = {};var overlay = new google.maps.OverlayView(); overlay.setMap(self.map);overlay.draw = function() { var projection = overlay.getProjection(), position = e.marker.getPosition();e.pixel = projection.fromLatLngToContainerPixel(position);buildContextMenuHTML(control, e); }; } else { buildContextMenuHTML(control, e); }var context_menu_element = getElementById('gmaps_context_menu');setTimeout(function() { context_menu_element.style.display = 'block'; }, 0); };/** * Add a context menu for a map or a marker. * * @param {object} options - The `options` object should contain: * * `control` (string): Kind of control the context menu will be attached. Can be "map" or "marker". * * `options` (array): A collection of context menu items: * * `title` (string): Item's title shown in the context menu. * * `name` (string): Item's identifier. * * `action` (function): Function triggered after selecting the context menu item. */ this.setContextMenu = function(options) { window.context_menu[self.el.id][options.control] = {};var i, ul = doc.createElement('ul');for (i in options.options) { if (options.options.hasOwnProperty(i)) { var option = options.options[i];window.context_menu[self.el.id][options.control][option.name] = { title: option.title, action: option.action }; } }ul.id = 'gmaps_context_menu'; ul.style.display = 'none'; ul.style.position = 'absolute'; ul.style.minWidth = '100px'; ul.style.background = 'white'; ul.style.listStyle = 'none'; ul.style.padding = '8px'; ul.style.boxShadow = '2px 2px 6px #ccc';if (!getElementById('gmaps_context_menu')) { doc.body.appendChild(ul); }var context_menu_element = getElementById('gmaps_context_menu');google.maps.event.addDomListener(context_menu_element, 'mouseout', function(ev) { if (!ev.relatedTarget || !this.contains(ev.relatedTarget)) { window.setTimeout(function(){ context_menu_element.style.display = 'none'; }, 400); } }, false); };/** * Hide the current context menu */ this.hideContextMenu = function() { var context_menu_element = getElementById('gmaps_context_menu');if (context_menu_element) { context_menu_element.style.display = 'none'; } };var setupListener = function(object, name) { google.maps.event.addListener(object, name, function(e){ if (e == undefined) { e = this; }options[name].apply(this, [e]);self.hideContextMenu(); }); };//google.maps.event.addListener(this.map, 'idle', this.hideContextMenu); google.maps.event.addListener(this.map, 'zoom_changed', this.hideContextMenu);for (var ev = 0; ev < events_that_hide_context_menu.length; ev++) { var name = events_that_hide_context_menu[ev];if (name in options) { setupListener(this.map, name); } }for (var ev = 0; ev < events_that_doesnt_hide_context_menu.length; ev++) { var name = events_that_doesnt_hide_context_menu[ev];if (name in options) { setupListener(this.map, name); } }google.maps.event.addListener(this.map, 'rightclick', function(e) { if (options.rightclick) { options.rightclick.apply(this, [e]); }if(window.context_menu[self.el.id]['map'] != undefined) { self.buildContextMenu('map', e); } });/** * Trigger a `resize` event, useful if you need to repaint the current map (for changes in the viewport or display / hide actions). */ this.refresh = function() { google.maps.event.trigger(this.map, 'resize'); };/** * Adjust the map zoom to include all the markers added in the map. */ this.fitZoom = function() { var latLngs = [], markers_length = this.markers.length, i;for (i = 0; i < markers_length; i++) { if(typeof(this.markers[i].visible) === 'boolean' && this.markers[i].visible) { latLngs.push(this.markers[i].getPosition()); } }this.fitLatLngBounds(latLngs); };/** * Adjust the map zoom to include all the coordinates in the `latLngs` array. * * @param {array} latLngs - Collection of `google.maps.LatLng` objects. */ this.fitLatLngBounds = function(latLngs) { var total = latLngs.length, bounds = new google.maps.LatLngBounds(), i;for(i = 0; i < total; i++) { bounds.extend(latLngs[i]); }this.map.fitBounds(bounds); };/** * Center the map using the `lat` and `lng` coordinates. * * @param {number} lat - Latitude of the coordinate. * @param {number} lng - Longitude of the coordinate. * @param {function} [callback] - Callback that will be executed after the map is centered. */ this.setCenter = function(lat, lng, callback) { this.map.panTo(new google.maps.LatLng(lat, lng));if (callback) { callback(); } };/** * Return the HTML element container of the map. * * @returns {HTMLElement} the element container. */ this.getElement = function() { return this.el; };/** * Increase the map's zoom. * * @param {number} [magnitude] - The number of times the map will be zoomed in. */ this.zoomIn = function(value) { value = value || 1;this.zoom = this.map.getZoom() + value; this.map.setZoom(this.zoom); };/** * Decrease the map's zoom. * * @param {number} [magnitude] - The number of times the map will be zoomed out. */ this.zoomOut = function(value) { value = value || 1;this.zoom = this.map.getZoom() - value; this.map.setZoom(this.zoom); };var native_methods = [], method;for (method in this.map) { if (typeof(this.map[method]) == 'function' && !this[method]) { native_methods.push(method); } }for (i = 0; i < native_methods.length; i++) { (function(gmaps, scope, method_name) { gmaps[method_name] = function(){ return scope[method_name].apply(scope, arguments); }; })(this, this.map, native_methods[i]); } };return GMaps; })(this);GMaps.prototype.createControl = function(options) { var control = document.createElement('div');control.style.cursor = 'pointer';if (options.disableDefaultStyles !== true) { control.style.fontFamily = 'Roboto, Arial, sans-serif'; control.style.fontSize = '11px'; control.style.boxShadow = 'rgba(0, 0, 0, 0.298039) 0px 1px 4px -1px'; }for (var option in options.style) { control.style[option] = options.style[option]; }if (options.id) { control.id = options.id; }if (options.title) { control.title = options.title; }if (options.classes) { control.className = options.classes; }if (options.content) { if (typeof options.content === 'string') { control.innerHTML = options.content; } else if (options.content instanceof HTMLElement) { control.appendChild(options.content); } }if (options.position) { control.position = google.maps.ControlPosition[options.position.toUpperCase()]; }for (var ev in options.events) { (function(object, name) { google.maps.event.addDomListener(object, name, function(){ options.events[name].apply(this, [this]); }); })(control, ev); }control.index = 1;return control; };/** * Add a custom control to the map UI. * * @param {object} options - The `options` object should contain: * * `style` (object): The keys and values of this object should be valid CSS properties and values. * * `id` (string): The HTML id for the custom control. * * `classes` (string): A string containing all the HTML classes for the custom control. * * `content` (string or HTML element): The content of the custom control. * * `position` (string): Any valid [`google.maps.ControlPosition`](https://developers.google.com/maps/documentation/javascript/controls#ControlPositioning) value, in lower or upper case. * * `events` (object): The keys of this object should be valid DOM events. The values should be functions. * * `disableDefaultStyles` (boolean): If false, removes the default styles for the controls like font (family and size), and box shadow. * @returns {HTMLElement} */ GMaps.prototype.addControl = function(options) { var control = this.createControl(options);this.controls.push(control); this.map.controls[control.position].push(control);return control; };/** * Remove a control from the map. `control` should be a control returned by `addControl()`. * * @param {HTMLElement} control - One of the controls returned by `addControl()`. * @returns {HTMLElement} the removed control. */ GMaps.prototype.removeControl = function(control) { var position = null, i;for (i = 0; i < this.controls.length; i++) { if (this.controls[i] == control) { position = this.controls[i].position; this.controls.splice(i, 1); } }if (position) { for (i = 0; i < this.map.controls.length; i++) { var controlsForPosition = this.map.controls[control.position];if (controlsForPosition.getAt(i) == control) { controlsForPosition.removeAt(i);break; } } }return control; };GMaps.prototype.createMarker = function(options) { if (options.lat == undefined && options.lng == undefined && options.position == undefined) { throw 'No latitude or longitude defined.'; }var self = this, details = options.details, fences = options.fences, outside = options.outside, base_options = { position: new google.maps.LatLng(options.lat, options.lng), map: null }, marker_options = extend_object(base_options, options);delete marker_options.lat; delete marker_options.lng; delete marker_options.fences; delete marker_options.outside;var marker = new google.maps.Marker(marker_options);marker.fences = fences;if (options.infoWindow) { marker.infoWindow = new google.maps.InfoWindow(options.infoWindow);var info_window_events = ['closeclick', 'content_changed', 'domready', 'position_changed', 'zindex_changed'];for (var ev = 0; ev < info_window_events.length; ev++) { (function(object, name) { if (options.infoWindow[name]) { google.maps.event.addListener(object, name, function(e){ options.infoWindow[name].apply(this, [e]); }); } })(marker.infoWindow, info_window_events[ev]); } }var marker_events = ['animation_changed', 'clickable_changed', 'cursor_changed', 'draggable_changed', 'flat_changed', 'icon_changed', 'position_changed', 'shadow_changed', 'shape_changed', 'title_changed', 'visible_changed', 'zindex_changed'];var marker_events_with_mouse = ['dblclick', 'drag', 'dragend', 'dragstart', 'mousedown', 'mouseout', 'mouseover', 'mouseup'];for (var ev = 0; ev < marker_events.length; ev++) { (function(object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(){ options[name].apply(this, [this]); }); } })(marker, marker_events[ev]); }for (var ev = 0; ev < marker_events_with_mouse.length; ev++) { (function(map, object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(me){ if(!me.pixel){ me.pixel = map.getProjection().fromLatLngToPoint(me.latLng) }options[name].apply(this, [me]); }); } })(this.map, marker, marker_events_with_mouse[ev]); }google.maps.event.addListener(marker, 'click', function() { this.details = details;if (options.click) { options.click.apply(this, [this]); }if (marker.infoWindow) { self.hideInfoWindows(); marker.infoWindow.open(self.map, marker); } });google.maps.event.addListener(marker, 'rightclick', function(e) { e.marker = this;if (options.rightclick) { options.rightclick.apply(this, [e]); }if (window.context_menu[self.el.id]['marker'] != undefined) { self.buildContextMenu('marker', e); } });if (marker.fences) { google.maps.event.addListener(marker, 'dragend', function() { self.checkMarkerGeofence(marker, function(m, f) { outside(m, f); }); }); }return marker; };GMaps.prototype.addMarker = function(options) { var marker; if(options.hasOwnProperty('gm_accessors_')) { // Native google.maps.Marker object marker = options; } else { if ((options.hasOwnProperty('lat') && options.hasOwnProperty('lng')) || options.position) { marker = this.createMarker(options); } else { throw 'No latitude or longitude defined.'; } }marker.setMap(this.map);if(this.markerClusterer) { this.markerClusterer.addMarker(marker); }this.markers.push(marker);GMaps.fire('marker_added', marker, this);return marker; };GMaps.prototype.addMarkers = function(array) { for (var i = 0, marker; marker=array[i]; i++) { this.addMarker(marker); }return this.markers; };GMaps.prototype.hideInfoWindows = function() { for (var i = 0, marker; marker = this.markers[i]; i++){ if (marker.infoWindow) { marker.infoWindow.close(); } } };GMaps.prototype.removeMarker = function(marker) { for (var i = 0; i < this.markers.length; i++) { if (this.markers[i] === marker) { this.markers[i].setMap(null); this.markers.splice(i, 1);if(this.markerClusterer) { this.markerClusterer.removeMarker(marker); }GMaps.fire('marker_removed', marker, this);break; } }return marker; };GMaps.prototype.removeMarkers = function (collection) { var new_markers = [];if (typeof collection == 'undefined') { for (var i = 0; i < this.markers.length; i++) { var marker = this.markers[i]; marker.setMap(null);GMaps.fire('marker_removed', marker, this); }if(this.markerClusterer && this.markerClusterer.clearMarkers) { this.markerClusterer.clearMarkers(); }this.markers = new_markers; } else { for (var i = 0; i < collection.length; i++) { var index = this.markers.indexOf(collection[i]);if (index > -1) { var marker = this.markers[index]; marker.setMap(null);if(this.markerClusterer) { this.markerClusterer.removeMarker(marker); }GMaps.fire('marker_removed', marker, this); } }for (var i = 0; i < this.markers.length; i++) { var marker = this.markers[i]; if (marker.getMap() != null) { new_markers.push(marker); } }this.markers = new_markers; } };GMaps.prototype.drawOverlay = function(options) { var overlay = new google.maps.OverlayView(), auto_show = true;overlay.setMap(this.map);if (options.auto_show != null) { auto_show = options.auto_show; }overlay.onAdd = function() { var el = document.createElement('div');el.style.borderStyle = "none"; el.style.borderWidth = "0px"; el.style.position = "absolute"; el.style.zIndex = 100; el.innerHTML = options.content;overlay.el = el;if (!options.layer) { options.layer = 'overlayLayer'; } var panes = this.getPanes(), overlayLayer = panes[options.layer], stop_overlay_events = ['contextmenu', 'DOMMouseScroll', 'dblclick', 'mousedown'];overlayLayer.appendChild(el);for (var ev = 0; ev < stop_overlay_events.length; ev++) { (function(object, name) { google.maps.event.addDomListener(object, name, function(e){ if (navigator.userAgent.toLowerCase().indexOf('msie') != -1 && document.all) { e.cancelBubble = true; e.returnValue = false; } else { e.stopPropagation(); } }); })(el, stop_overlay_events[ev]); }if (options.click) { panes.overlayMouseTarget.appendChild(overlay.el); google.maps.event.addDomListener(overlay.el, 'click', function() { options.click.apply(overlay, [overlay]); }); }google.maps.event.trigger(this, 'ready'); };overlay.draw = function() { var projection = this.getProjection(), pixel = projection.fromLatLngToDivPixel(new google.maps.LatLng(options.lat, options.lng));options.horizontalOffset = options.horizontalOffset || 0; options.verticalOffset = options.verticalOffset || 0;var el = overlay.el, content = el.children[0], content_height = content.clientHeight, content_width = content.clientWidth;switch (options.verticalAlign) { case 'top': el.style.top = (pixel.y - content_height + options.verticalOffset) + 'px'; break; default: case 'middle': el.style.top = (pixel.y - (content_height / 2) + options.verticalOffset) + 'px'; break; case 'bottom': el.style.top = (pixel.y + options.verticalOffset) + 'px'; break; }switch (options.horizontalAlign) { case 'left': el.style.left = (pixel.x - content_width + options.horizontalOffset) + 'px'; break; default: case 'center': el.style.left = (pixel.x - (content_width / 2) + options.horizontalOffset) + 'px'; break; case 'right': el.style.left = (pixel.x + options.horizontalOffset) + 'px'; break; }el.style.display = auto_show ? 'block' : 'none';if (!auto_show) { options.show.apply(this, [el]); } };overlay.onRemove = function() { var el = overlay.el;if (options.remove) { options.remove.apply(this, [el]); } else { overlay.el.parentNode.removeChild(overlay.el); overlay.el = null; } };this.overlays.push(overlay); return overlay; };GMaps.prototype.removeOverlay = function(overlay) { for (var i = 0; i < this.overlays.length; i++) { if (this.overlays[i] === overlay) { this.overlays[i].setMap(null); this.overlays.splice(i, 1);break; } } };GMaps.prototype.removeOverlays = function() { for (var i = 0, item; item = this.overlays[i]; i++) { item.setMap(null); }this.overlays = []; };GMaps.prototype.drawPolyline = function(options) { var path = [], points = options.path;if (points.length) { if (points[0][0] === undefined) { path = points; } else { for (var i = 0, latlng; latlng = points[i]; i++) { path.push(new google.maps.LatLng(latlng[0], latlng[1])); } } }var polyline_options = { map: this.map, path: path, strokeColor: options.strokeColor, strokeOpacity: options.strokeOpacity, strokeWeight: options.strokeWeight, geodesic: options.geodesic, clickable: true, editable: false, visible: true };if (options.hasOwnProperty("clickable")) { polyline_options.clickable = options.clickable; }if (options.hasOwnProperty("editable")) { polyline_options.editable = options.editable; }if (options.hasOwnProperty("icons")) { polyline_options.icons = options.icons; }if (options.hasOwnProperty("zIndex")) { polyline_options.zIndex = options.zIndex; }var polyline = new google.maps.Polyline(polyline_options);var polyline_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];for (var ev = 0; ev < polyline_events.length; ev++) { (function(object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(e){ options[name].apply(this, [e]); }); } })(polyline, polyline_events[ev]); }this.polylines.push(polyline);GMaps.fire('polyline_added', polyline, this);return polyline; };GMaps.prototype.removePolyline = function(polyline) { for (var i = 0; i < this.polylines.length; i++) { if (this.polylines[i] === polyline) { this.polylines[i].setMap(null); this.polylines.splice(i, 1);GMaps.fire('polyline_removed', polyline, this);break; } } };GMaps.prototype.removePolylines = function() { for (var i = 0, item; item = this.polylines[i]; i++) { item.setMap(null); }this.polylines = []; };GMaps.prototype.drawCircle = function(options) { options = extend_object({ map: this.map, center: new google.maps.LatLng(options.lat, options.lng) }, options);delete options.lat; delete options.lng;var polygon = new google.maps.Circle(options), polygon_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];for (var ev = 0; ev < polygon_events.length; ev++) { (function(object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(e){ options[name].apply(this, [e]); }); } })(polygon, polygon_events[ev]); }this.polygons.push(polygon);return polygon; };GMaps.prototype.drawRectangle = function(options) { options = extend_object({ map: this.map }, options);var latLngBounds = new google.maps.LatLngBounds( new google.maps.LatLng(options.bounds[0][0], options.bounds[0][1]), new google.maps.LatLng(options.bounds[1][0], options.bounds[1][1]) );options.bounds = latLngBounds;var polygon = new google.maps.Rectangle(options), polygon_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];for (var ev = 0; ev < polygon_events.length; ev++) { (function(object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(e){ options[name].apply(this, [e]); }); } })(polygon, polygon_events[ev]); }this.polygons.push(polygon);return polygon; };GMaps.prototype.drawPolygon = function(options) { var useGeoJSON = false;if(options.hasOwnProperty("useGeoJSON")) { useGeoJSON = options.useGeoJSON; }delete options.useGeoJSON;options = extend_object({ map: this.map }, options);if (useGeoJSON == false) { options.paths = [options.paths.slice(0)]; }if (options.paths.length > 0) { if (options.paths[0].length > 0) { options.paths = array_flat(array_map(options.paths, arrayToLatLng, useGeoJSON)); } }var polygon = new google.maps.Polygon(options), polygon_events = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseout', 'mouseover', 'mouseup', 'rightclick'];for (var ev = 0; ev < polygon_events.length; ev++) { (function(object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(e){ options[name].apply(this, [e]); }); } })(polygon, polygon_events[ev]); }this.polygons.push(polygon);GMaps.fire('polygon_added', polygon, this);return polygon; };GMaps.prototype.removePolygon = function(polygon) { for (var i = 0; i < this.polygons.length; i++) { if (this.polygons[i] === polygon) { this.polygons[i].setMap(null); this.polygons.splice(i, 1);GMaps.fire('polygon_removed', polygon, this);break; } } };GMaps.prototype.removePolygons = function() { for (var i = 0, item; item = this.polygons[i]; i++) { item.setMap(null); }this.polygons = []; };GMaps.prototype.getFromFusionTables = function(options) { var events = options.events;delete options.events;var fusion_tables_options = options, layer = new google.maps.FusionTablesLayer(fusion_tables_options);for (var ev in events) { (function(object, name) { google.maps.event.addListener(object, name, function(e) { events[name].apply(this, [e]); }); })(layer, ev); }this.layers.push(layer);return layer; };GMaps.prototype.loadFromFusionTables = function(options) { var layer = this.getFromFusionTables(options); layer.setMap(this.map);return layer; };GMaps.prototype.getFromKML = function(options) { var url = options.url, events = options.events;delete options.url; delete options.events;var kml_options = options, layer = new google.maps.KmlLayer(url, kml_options);for (var ev in events) { (function(object, name) { google.maps.event.addListener(object, name, function(e) { events[name].apply(this, [e]); }); })(layer, ev); }this.layers.push(layer);return layer; };GMaps.prototype.loadFromKML = function(options) { var layer = this.getFromKML(options); layer.setMap(this.map);return layer; };GMaps.prototype.addLayer = function(layerName, options) { //var default_layers = ['weather', 'clouds', 'traffic', 'transit', 'bicycling', 'panoramio', 'places']; options = options || {}; var layer;switch(layerName) { case 'weather': this.singleLayers.weather = layer = new google.maps.weather.WeatherLayer(); break; case 'clouds': this.singleLayers.clouds = layer = new google.maps.weather.CloudLayer(); break; case 'traffic': this.singleLayers.traffic = layer = new google.maps.TrafficLayer(); break; case 'transit': this.singleLayers.transit = layer = new google.maps.TransitLayer(); break; case 'bicycling': this.singleLayers.bicycling = layer = new google.maps.BicyclingLayer(); break; case 'panoramio': this.singleLayers.panoramio = layer = new google.maps.panoramio.PanoramioLayer(); layer.setTag(options.filter); delete options.filter;//click event if (options.click) { google.maps.event.addListener(layer, 'click', function(event) { options.click(event); delete options.click; }); } break; case 'places': this.singleLayers.places = layer = new google.maps.places.PlacesService(this.map);//search, nearbySearch, radarSearch callback, Both are the same if (options.search || options.nearbySearch || options.radarSearch) { var placeSearchRequest = { bounds : options.bounds || null, keyword : options.keyword || null, location : options.location || null, name : options.name || null, radius : options.radius || null, rankBy : options.rankBy || null, types : options.types || null };if (options.radarSearch) { layer.radarSearch(placeSearchRequest, options.radarSearch); }if (options.search) { layer.search(placeSearchRequest, options.search); }if (options.nearbySearch) { layer.nearbySearch(placeSearchRequest, options.nearbySearch); } }//textSearch callback if (options.textSearch) { var textSearchRequest = { bounds : options.bounds || null, location : options.location || null, query : options.query || null, radius : options.radius || null };layer.textSearch(textSearchRequest, options.textSearch); } break; }if (layer !== undefined) { if (typeof layer.setOptions == 'function') { layer.setOptions(options); } if (typeof layer.setMap == 'function') { layer.setMap(this.map); }return layer; } };GMaps.prototype.removeLayer = function(layer) { if (typeof(layer) == "string" && this.singleLayers[layer] !== undefined) { this.singleLayers[layer].setMap(null);delete this.singleLayers[layer]; } else { for (var i = 0; i < this.layers.length; i++) { if (this.layers[i] === layer) { this.layers[i].setMap(null); this.layers.splice(i, 1);break; } } } };var travelMode, unitSystem;GMaps.prototype.getRoutes = function(options) { switch (options.travelMode) { case 'bicycling': travelMode = google.maps.TravelMode.BICYCLING; break; case 'transit': travelMode = google.maps.TravelMode.TRANSIT; break; case 'driving': travelMode = google.maps.TravelMode.DRIVING; break; default: travelMode = google.maps.TravelMode.WALKING; break; }if (options.unitSystem === 'imperial') { unitSystem = google.maps.UnitSystem.IMPERIAL; } else { unitSystem = google.maps.UnitSystem.METRIC; }var base_options = { avoidHighways: false, avoidTolls: false, optimizeWaypoints: false, waypoints: [] }, request_options = extend_object(base_options, options);request_options.origin = /string/.test(typeof options.origin) ? options.origin : new google.maps.LatLng(options.origin[0], options.origin[1]); request_options.destination = /string/.test(typeof options.destination) ? options.destination : new google.maps.LatLng(options.destination[0], options.destination[1]); request_options.travelMode = travelMode; request_options.unitSystem = unitSystem;delete request_options.callback; delete request_options.error;var self = this, routes = [], service = new google.maps.DirectionsService();service.route(request_options, function(result, status) { if (status === google.maps.DirectionsStatus.OK) { for (var r in result.routes) { if (result.routes.hasOwnProperty(r)) { routes.push(result.routes[r]); } }if (options.callback) { options.callback(routes, result, status); } } else { if (options.error) { options.error(result, status); } } }); };GMaps.prototype.removeRoutes = function() { this.routes.length = 0; };GMaps.prototype.getElevations = function(options) { options = extend_object({ locations: [], path : false, samples : 256 }, options);if (options.locations.length > 0) { if (options.locations[0].length > 0) { options.locations = array_flat(array_map([options.locations], arrayToLatLng, false)); } }var callback = options.callback; delete options.callback;var service = new google.maps.ElevationService();//location request if (!options.path) { delete options.path; delete options.samples;service.getElevationForLocations(options, function(result, status) { if (callback && typeof(callback) === "function") { callback(result, status); } }); //path request } else { var pathRequest = { path : options.locations, samples : options.samples };service.getElevationAlongPath(pathRequest, function(result, status) { if (callback && typeof(callback) === "function") { callback(result, status); } }); } };GMaps.prototype.cleanRoute = GMaps.prototype.removePolylines;GMaps.prototype.renderRoute = function(options, renderOptions) { var self = this, panel = ((typeof renderOptions.panel === 'string') ? document.getElementById(renderOptions.panel.replace('#', '')) : renderOptions.panel), display;renderOptions.panel = panel; renderOptions = extend_object({ map: this.map }, renderOptions); display = new google.maps.DirectionsRenderer(renderOptions);this.getRoutes({ origin: options.origin, destination: options.destination, travelMode: options.travelMode, waypoints: options.waypoints, unitSystem: options.unitSystem, error: options.error, avoidHighways: options.avoidHighways, avoidTolls: options.avoidTolls, optimizeWaypoints: options.optimizeWaypoints, callback: function(routes, response, status) { if (status === google.maps.DirectionsStatus.OK) { display.setDirections(response); } } }); };GMaps.prototype.drawRoute = function(options) { var self = this;this.getRoutes({ origin: options.origin, destination: options.destination, travelMode: options.travelMode, waypoints: options.waypoints, unitSystem: options.unitSystem, error: options.error, avoidHighways: options.avoidHighways, avoidTolls: options.avoidTolls, optimizeWaypoints: options.optimizeWaypoints, callback: function(routes) { if (routes.length > 0) { var polyline_options = { path: routes[routes.length - 1].overview_path, strokeColor: options.strokeColor, strokeOpacity: options.strokeOpacity, strokeWeight: options.strokeWeight };if (options.hasOwnProperty("icons")) { polyline_options.icons = options.icons; }self.drawPolyline(polyline_options);if (options.callback) { options.callback(routes[routes.length - 1]); } } } }); };GMaps.prototype.travelRoute = function(options) { if (options.origin && options.destination) { this.getRoutes({ origin: options.origin, destination: options.destination, travelMode: options.travelMode, waypoints : options.waypoints, unitSystem: options.unitSystem, error: options.error, callback: function(e) { //start callback if (e.length > 0 && options.start) { options.start(e[e.length - 1]); }//step callback if (e.length > 0 && options.step) { var route = e[e.length - 1]; if (route.legs.length > 0) { var steps = route.legs[0].steps; for (var i = 0, step; step = steps[i]; i++) { step.step_number = i; options.step(step, (route.legs[0].steps.length - 1)); } } }//end callback if (e.length > 0 && options.end) { options.end(e[e.length - 1]); } } }); } else if (options.route) { if (options.route.legs.length > 0) { var steps = options.route.legs[0].steps; for (var i = 0, step; step = steps[i]; i++) { step.step_number = i; options.step(step); } } } };GMaps.prototype.drawSteppedRoute = function(options) { var self = this;if (options.origin && options.destination) { this.getRoutes({ origin: options.origin, destination: options.destination, travelMode: options.travelMode, waypoints : options.waypoints, error: options.error, callback: function(e) { //start callback if (e.length > 0 && options.start) { options.start(e[e.length - 1]); }//step callback if (e.length > 0 && options.step) { var route = e[e.length - 1]; if (route.legs.length > 0) { var steps = route.legs[0].steps; for (var i = 0, step; step = steps[i]; i++) { step.step_number = i; var polyline_options = { path: step.path, strokeColor: options.strokeColor, strokeOpacity: options.strokeOpacity, strokeWeight: options.strokeWeight };if (options.hasOwnProperty("icons")) { polyline_options.icons = options.icons; }self.drawPolyline(polyline_options); options.step(step, (route.legs[0].steps.length - 1)); } } }//end callback if (e.length > 0 && options.end) { options.end(e[e.length - 1]); } } }); } else if (options.route) { if (options.route.legs.length > 0) { var steps = options.route.legs[0].steps; for (var i = 0, step; step = steps[i]; i++) { step.step_number = i; var polyline_options = { path: step.path, strokeColor: options.strokeColor, strokeOpacity: options.strokeOpacity, strokeWeight: options.strokeWeight };if (options.hasOwnProperty("icons")) { polyline_options.icons = options.icons; }self.drawPolyline(polyline_options); options.step(step); } } } };GMaps.Route = function(options) { this.origin = options.origin; this.destination = options.destination; this.waypoints = options.waypoints;this.map = options.map; this.route = options.route; this.step_count = 0; this.steps = this.route.legs[0].steps; this.steps_length = this.steps.length;var polyline_options = { path: new google.maps.MVCArray(), strokeColor: options.strokeColor, strokeOpacity: options.strokeOpacity, strokeWeight: options.strokeWeight };if (options.hasOwnProperty("icons")) { polyline_options.icons = options.icons; }this.polyline = this.map.drawPolyline(polyline_options).getPath(); };GMaps.Route.prototype.getRoute = function(options) { var self = this;this.map.getRoutes({ origin : this.origin, destination : this.destination, travelMode : options.travelMode, waypoints : this.waypoints || [], error: options.error, callback : function() { self.route = e[0];if (options.callback) { options.callback.call(self); } } }); };GMaps.Route.prototype.back = function() { if (this.step_count > 0) { this.step_count--; var path = this.route.legs[0].steps[this.step_count].path;for (var p in path){ if (path.hasOwnProperty(p)){ this.polyline.pop(); } } } };GMaps.Route.prototype.forward = function() { if (this.step_count < this.steps_length) { var path = this.route.legs[0].steps[this.step_count].path;for (var p in path){ if (path.hasOwnProperty(p)){ this.polyline.push(path[p]); } } this.step_count++; } };GMaps.prototype.checkGeofence = function(lat, lng, fence) { return fence.containsLatLng(new google.maps.LatLng(lat, lng)); };GMaps.prototype.checkMarkerGeofence = function(marker, outside_callback) { if (marker.fences) { for (var i = 0, fence; fence = marker.fences[i]; i++) { var pos = marker.getPosition(); if (!this.checkGeofence(pos.lat(), pos.lng(), fence)) { outside_callback(marker, fence); } } } };GMaps.prototype.toImage = function(options) { var options = options || {}, static_map_options = {};static_map_options['size'] = options['size'] || [this.el.clientWidth, this.el.clientHeight]; static_map_options['lat'] = this.getCenter().lat(); static_map_options['lng'] = this.getCenter().lng();if (this.markers.length > 0) { static_map_options['markers'] = []; for (var i = 0; i < this.markers.length; i++) { static_map_options['markers'].push({ lat: this.markers[i].getPosition().lat(), lng: this.markers[i].getPosition().lng() }); } }if (this.polylines.length > 0) { var polyline = this.polylines[0]; static_map_options['polyline'] = {}; static_map_options['polyline']['path'] = google.maps.geometry.encoding.encodePath(polyline.getPath()); static_map_options['polyline']['strokeColor'] = polyline.strokeColor static_map_options['polyline']['strokeOpacity'] = polyline.strokeOpacity static_map_options['polyline']['strokeWeight'] = polyline.strokeWeight }return GMaps.staticMapURL(static_map_options); };GMaps.staticMapURL = function(options){ var parameters = [], data, static_root = (location.protocol === 'file:' ? 'http:' : location.protocol ) + '//maps.googleapis.com/maps/api/staticmap';if (options.url) { static_root = options.url; delete options.url; }static_root += '?';var markers = options.markers; delete options.markers;if (!markers && options.marker) { markers = [options.marker]; delete options.marker; }var styles = options.styles;delete options.styles;var polyline = options.polyline; delete options.polyline;/** Map options **/ if (options.center) { parameters.push('center=' + options.center); delete options.center; } else if (options.address) { parameters.push('center=' + options.address); delete options.address; } else if (options.lat) { parameters.push(['center=', options.lat, ',', options.lng].join('')); delete options.lat; delete options.lng; } else if (options.visible) { var visible = encodeURI(options.visible.join('|')); parameters.push('visible=' + visible); }var size = options.size; if (size) { if (size.join) { size = size.join('x'); } delete options.size; } else { size = '630x300'; } parameters.push('size=' + size);if (!options.zoom && options.zoom !== false) { options.zoom = 15; }var sensor = options.hasOwnProperty('sensor') ? !!options.sensor : true; delete options.sensor; parameters.push('sensor=' + sensor);for (var param in options) { if (options.hasOwnProperty(param)) { parameters.push(param + '=' + options[param]); } }/** Markers **/ if (markers) { var marker, loc;for (var i = 0; data = markers[i]; i++) { marker = [];if (data.size && data.size !== 'normal') { marker.push('size:' + data.size); delete data.size; } else if (data.icon) { marker.push('icon:' + encodeURI(data.icon)); delete data.icon; }if (data.color) { marker.push('color:' + data.color.replace('#', '0x')); delete data.color; }if (data.label) { marker.push('label:' + data.label[0].toUpperCase()); delete data.label; }loc = (data.address ? data.address : data.lat + ',' + data.lng); delete data.address; delete data.lat; delete data.lng;for(var param in data){ if (data.hasOwnProperty(param)) { marker.push(param + ':' + data[param]); } }if (marker.length || i === 0) { marker.push(loc); marker = marker.join('|'); parameters.push('markers=' + encodeURI(marker)); } // New marker without styles else { marker = parameters.pop() + encodeURI('|' + loc); parameters.push(marker); } } }/** Map Styles **/ if (styles) { for (var i = 0; i < styles.length; i++) { var styleRule = []; if (styles[i].featureType){ styleRule.push('feature:' + styles[i].featureType.toLowerCase()); }if (styles[i].elementType) { styleRule.push('element:' + styles[i].elementType.toLowerCase()); }for (var j = 0; j < styles[i].stylers.length; j++) { for (var p in styles[i].stylers[j]) { var ruleArg = styles[i].stylers[j][p]; if (p == 'hue' || p == 'color') { ruleArg = '0x' + ruleArg.substring(1); } styleRule.push(p + ':' + ruleArg); } }var rule = styleRule.join('|'); if (rule != '') { parameters.push('style=' + rule); } } }/** Polylines **/ function parseColor(color, opacity) { if (color[0] === '#'){ color = color.replace('#', '0x');if (opacity) { opacity = parseFloat(opacity); opacity = Math.min(1, Math.max(opacity, 0)); if (opacity === 0) { return '0x00000000'; } opacity = (opacity * 255).toString(16); if (opacity.length === 1) { opacity += opacity; }color = color.slice(0,8) + opacity; } } return color; }if (polyline) { data = polyline; polyline = [];if (data.strokeWeight) { polyline.push('weight:' + parseInt(data.strokeWeight, 10)); }if (data.strokeColor) { var color = parseColor(data.strokeColor, data.strokeOpacity); polyline.push('color:' + color); }if (data.fillColor) { var fillcolor = parseColor(data.fillColor, data.fillOpacity); polyline.push('fillcolor:' + fillcolor); }var path = data.path; if (path.join) { for (var j=0, pos; pos=path[j]; j++) { polyline.push(pos.join(',')); } } else { polyline.push('enc:' + path); }polyline = polyline.join('|'); parameters.push('path=' + encodeURI(polyline)); }/** Retina support **/ var dpi = window.devicePixelRatio || 1; parameters.push('scale=' + dpi);parameters = parameters.join('&'); return static_root + parameters; };GMaps.prototype.addMapType = function(mapTypeId, options) { if (options.hasOwnProperty("getTileUrl") && typeof(options["getTileUrl"]) == "function") { options.tileSize = options.tileSize || new google.maps.Size(256, 256);var mapType = new google.maps.ImageMapType(options);this.map.mapTypes.set(mapTypeId, mapType); } else { throw "'getTileUrl' function required."; } };GMaps.prototype.addOverlayMapType = function(options) { if (options.hasOwnProperty("getTile") && typeof(options["getTile"]) == "function") { var overlayMapTypeIndex = options.index;delete options.index;this.map.overlayMapTypes.insertAt(overlayMapTypeIndex, options); } else { throw "'getTile' function required."; } };GMaps.prototype.removeOverlayMapType = function(overlayMapTypeIndex) { this.map.overlayMapTypes.removeAt(overlayMapTypeIndex); };GMaps.prototype.addStyle = function(options) { var styledMapType = new google.maps.StyledMapType(options.styles, { name: options.styledMapName });this.map.mapTypes.set(options.mapTypeId, styledMapType); };GMaps.prototype.setStyle = function(mapTypeId) { this.map.setMapTypeId(mapTypeId); };GMaps.prototype.createPanorama = function(streetview_options) { if (!streetview_options.hasOwnProperty('lat') || !streetview_options.hasOwnProperty('lng')) { streetview_options.lat = this.getCenter().lat(); streetview_options.lng = this.getCenter().lng(); }this.panorama = GMaps.createPanorama(streetview_options);this.map.setStreetView(this.panorama);return this.panorama; };GMaps.createPanorama = function(options) { var el = getElementById(options.el, options.context);options.position = new google.maps.LatLng(options.lat, options.lng);delete options.el; delete options.context; delete options.lat; delete options.lng;var streetview_events = ['closeclick', 'links_changed', 'pano_changed', 'position_changed', 'pov_changed', 'resize', 'visible_changed'], streetview_options = extend_object({visible : true}, options);for (var i = 0; i < streetview_events.length; i++) { delete streetview_options[streetview_events[i]]; }var panorama = new google.maps.StreetViewPanorama(el, streetview_options);for (var i = 0; i < streetview_events.length; i++) { (function(object, name) { if (options[name]) { google.maps.event.addListener(object, name, function(){ options[name].apply(this); }); } })(panorama, streetview_events[i]); }return panorama; };GMaps.prototype.on = function(event_name, handler) { return GMaps.on(event_name, this, handler); };GMaps.prototype.off = function(event_name) { GMaps.off(event_name, this); };GMaps.prototype.once = function(event_name, handler) { return GMaps.once(event_name, this, handler); };GMaps.custom_events = ['marker_added', 'marker_removed', 'polyline_added', 'polyline_removed', 'polygon_added', 'polygon_removed', 'geolocated', 'geolocation_failed'];GMaps.on = function(event_name, object, handler) { if (GMaps.custom_events.indexOf(event_name) == -1) { if(object instanceof GMaps) object = object.map; return google.maps.event.addListener(object, event_name, handler); } else { var registered_event = { handler : handler, eventName : event_name };object.registered_events[event_name] = object.registered_events[event_name] || []; object.registered_events[event_name].push(registered_event);return registered_event; } };GMaps.off = function(event_name, object) { if (GMaps.custom_events.indexOf(event_name) == -1) { if(object instanceof GMaps) object = object.map; google.maps.event.clearListeners(object, event_name); } else { object.registered_events[event_name] = []; } };GMaps.once = function(event_name, object, handler) { if (GMaps.custom_events.indexOf(event_name) == -1) { if(object instanceof GMaps) object = object.map; return google.maps.event.addListenerOnce(object, event_name, handler); } };GMaps.fire = function(event_name, object, scope) { if (GMaps.custom_events.indexOf(event_name) == -1) { google.maps.event.trigger(object, event_name, Array.prototype.slice.apply(arguments).slice(2)); } else { if(event_name in scope.registered_events) { var firing_events = scope.registered_events[event_name];for(var i = 0; i < firing_events.length; i++) { (function(handler, scope, object) { handler.apply(scope, [object]); })(firing_events[i]['handler'], scope, object); } } } };GMaps.geolocate = function(options) { var complete_callback = options.always || options.complete;if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(function(position) { options.success(position);if (complete_callback) { complete_callback(); } }, function(error) { options.error(error);if (complete_callback) { complete_callback(); } }, options.options); } else { options.not_supported();if (complete_callback) { complete_callback(); } } };GMaps.geocode = function(options) { this.geocoder = new google.maps.Geocoder(); var callback = options.callback; if (options.hasOwnProperty('lat') && options.hasOwnProperty('lng')) { options.latLng = new google.maps.LatLng(options.lat, options.lng); }delete options.lat; delete options.lng; delete options.callback; this.geocoder.geocode(options, function(results, status) { callback(results, status); }); };if (typeof window.google === 'object' && window.google.maps) { //========================== // Polygon containsLatLng // https://github.com/tparkin/Google-Maps-Point-in-Polygon // Poygon getBounds extension - google-maps-extensions // http://code.google.com/p/google-maps-extensions/source/browse/google.maps.Polygon.getBounds.js if (!google.maps.Polygon.prototype.getBounds) { google.maps.Polygon.prototype.getBounds = function(latLng) { var bounds = new google.maps.LatLngBounds(); var paths = this.getPaths(); var path;for (var p = 0; p < paths.getLength(); p++) { path = paths.getAt(p); for (var i = 0; i < path.getLength(); i++) { bounds.extend(path.getAt(i)); } }return bounds; }; }if (!google.maps.Polygon.prototype.containsLatLng) { // Polygon containsLatLng - method to determine if a latLng is within a polygon google.maps.Polygon.prototype.containsLatLng = function(latLng) { // Exclude points outside of bounds as there is no way they are in the poly var bounds = this.getBounds();if (bounds !== null && !bounds.contains(latLng)) { return false; }// Raycast point in polygon method var inPoly = false;var numPaths = this.getPaths().getLength(); for (var p = 0; p < numPaths; p++) { var path = this.getPaths().getAt(p); var numPoints = path.getLength(); var j = numPoints - 1;for (var i = 0; i < numPoints; i++) { var vertex1 = path.getAt(i); var vertex2 = path.getAt(j);if (vertex1.lng() < latLng.lng() && vertex2.lng() >= latLng.lng() || vertex2.lng() < latLng.lng() && vertex1.lng() >= latLng.lng()) { if (vertex1.lat() + (latLng.lng() - vertex1.lng()) / (vertex2.lng() - vertex1.lng()) * (vertex2.lat() - vertex1.lat()) < latLng.lat()) { inPoly = !inPoly; } }j = i; } }return inPoly; }; }if (!google.maps.Circle.prototype.containsLatLng) { google.maps.Circle.prototype.containsLatLng = function(latLng) { if (google.maps.geometry) { return google.maps.geometry.spherical.computeDistanceBetween(this.getCenter(), latLng) <= this.getRadius(); } else { return true; } }; }google.maps.Rectangle.prototype.containsLatLng = function(latLng) { return this.getBounds().contains(latLng); };google.maps.LatLngBounds.prototype.containsLatLng = function(latLng) { return this.contains(latLng); };google.maps.Marker.prototype.setFences = function(fences) { this.fences = fences; };google.maps.Marker.prototype.addFence = function(fence) { this.fences.push(fence); };google.maps.Marker.prototype.getId = function() { return this['__gm_id']; }; }//========================== // Array indexOf // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf if (!Array.prototype.indexOf) { Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) { "use strict"; if (this == null) { throw new TypeError(); } var t = Object(this); var len = t.length >>> 0; if (len === 0) { return -1; } var n = 0; if (arguments.length > 1) { n = Number(arguments[1]); if (n != n) { // shortcut for verifying if it's NaN n = 0; } else if (n != 0 && n != Infinity && n != -Infinity) { n = (n > 0 || -1) * Math.floor(Math.abs(n)); } } if (n >= len) { return -1; } var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); for (; k < len; k++) { if (k in t && t[k] === searchElement) { return k; } } return -1; } }return GMaps; }));